<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Eric Yager</title>
    <link>https://ericyager.net/tags/go/</link>
    <description>Recent content in go on Eric Yager</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 23 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ericyager.net/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go in Go</title>
      <link>https://ericyager.net/project/go-go/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ericyager.net/project/go-go/</guid>
      
      <description>&lt;p&gt;This project is intended to help me learn about databases and web development with Go. For now it is just a command line app implementation of the game &lt;a href=&#34;https://en.wikipedia.org/wiki/Go_(game)&#34;&gt;Go&lt;/a&gt; in the programming language &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt;. In the future, I hope to add a database for storing old games, an API server for playing games, and a simple frontend to interact with the API.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;The source code for this project is available on &lt;a href=&#34;https://github.com/ejyager00/gogo&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;  ./gogo
The board is x, y indexed from the top left corner starting with 0.
Input moves with two integers separated by a space representing x and y respectively.
To pass, input -1 and to resign input -2.
Input board size and komi (white advantage) separated by a space: 7 2.5
+++++++
+++++++
+++++++
+++++++
+++++++
+++++++
+++++++


Enter black&amp;#39;s move: 0 0
●++++++
+++++++
+++++++
+++++++
+++++++
+++++++
+++++++


Enter white&amp;#39;s move: 1 0
●○+++++
+++++++
+++++++
+++++++
+++++++
+++++++
+++++++


Enter black&amp;#39;s move: 6 6
●○+++++
+++++++
+++++++
+++++++
+++++++
+++++++
++++++●


Enter white&amp;#39;s move: 0 1
+○+++++
○++++++
+++++++
+++++++
+++++++
+++++++
++++++●


Enter black&amp;#39;s move: -1
+○+++++
○++++++
+++++++
+++++++
+++++++
+++++++
++++++●


Enter white&amp;#39;s move: 3 3
+○+++++
○++++++
+++++++
+++○+++
+++++++
+++++++
++++++●


Enter black&amp;#39;s move: -2
+○+++++
○++++++
+++++++
+++○+++
+++++++
+++++++
++++++●


White wins, 7.5 to 1.0
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>Encryption with Go</title>
      <link>https://ericyager.net/project/go-encryption/</link>
      <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ericyager.net/project/go-encryption/</guid>
      
      <description>&lt;p&gt;In Spring 2022, I took a course about cryptography. For some of the assignments, we needed to implement encryption algorithms. I did not implement any that would be considered secure by modern standards. However, I did code up a couple of command line apps in Go to encrypt using cipher techniques. The techniques I implemented are the classic Caesar cipher and the historically-renowned Vigenère cipher.&lt;/p&gt;
&lt;p&gt;These projects weren&amp;rsquo;t too challenging, but I learned about command line flags in Go and practiced file handling.&lt;/p&gt;
&lt;h2 id=&#34;caesar-cipher&#34;&gt;Caesar Cipher&lt;/h2&gt;
&lt;h3 id=&#34;source-code&#34;&gt;Source Code&lt;/h3&gt;
&lt;p&gt;The source code for this project is available on &lt;a href=&#34;https://github.com/ejyager00/caesar&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;pictures&#34;&gt;Pictures&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;caesarEncryption.png&#34; alt=&#34;Encrypting with a caesar cipher.&#34;&gt;
&lt;br&gt;
Caesar cipher program encrypting a message.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;caesarDecryption.png&#34; alt=&#34;Decrypting with a caesar cipher.&#34;&gt;
&lt;br&gt;
Caesar cipher program decrypting a message.&lt;/p&gt;
&lt;h2 id=&#34;vigenère-cipher&#34;&gt;Vigenère Cipher&lt;/h2&gt;
&lt;h3 id=&#34;source-code-1&#34;&gt;Source Code&lt;/h3&gt;
&lt;p&gt;The source code for this project is available on &lt;a href=&#34;https://github.com/ejyager00/vigenere&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;pictures-1&#34;&gt;Pictures&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;vigenereDemo.png&#34; alt=&#34;Encrypting and decrypting with a caesar cipher.&#34;&gt;
&lt;br&gt;
Encrypting and decrypting with a vigenere cipher.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Lattice Paths</title>
      <link>https://ericyager.net/project/lattice-paths/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ericyager.net/project/lattice-paths/</guid>
      
      <description>&lt;p&gt;During the Fall 2021, Spring 2022 school year, I worked on a research team studing the mathematical concept of &lt;em&gt;k&lt;/em&gt;-distinct &lt;a href=&#34;https://en.wikipedia.org/wiki/Lattice_path#North-East_lattice_paths&#34;&gt;lattice paths&lt;/a&gt;. Our research involved finding maximum cardinality sets of lattice paths on a paricular size lattice such that no path overlapped with another on &lt;em&gt;k&lt;/em&gt; or more edges. We will be publishing the results of our research in the near future.&lt;/p&gt;
&lt;p&gt;I led the programming effort on this project to develop code to test a greedy algorithm and a brute force algorithm for generating maximum sets of lattice paths. This was the first project I worked on for which I made extensive use of Go. I initially wrote most of the codebase in Python, but it was not fast enough for extended work on brute-force computation.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;The source code for this project is available on &lt;a href=&#34;https://github.com/ejyager00/lattice_paths&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;Our undergraduate research symposium presentation is available &lt;a href=&#34;https://scholar.valpo.edu/cus/1081/&#34;&gt;here&lt;/a&gt;. The presentation contains a basic summary of our results. We are currently working on publishing a full-length article in an undergraduate research journal.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Nerdle</title>
      <link>https://ericyager.net/project/nerdle/</link>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ericyager.net/project/nerdle/</guid>
      
      <description>&lt;p&gt;You may recall in December 2021 the viral internet game Wordle, in which players try to guess a five letter word in 6 guesses. Each guess, they receive hints about the correctness of their current guess. The widespread popularity of Wordle led to many clones and spinoffs, one of which is called &lt;a href=&#34;https://nerdlegame.com/&#34;&gt;Nerdle&lt;/a&gt;. In Nerdle, rather than attempting to guess a word, players attempt to guess an equation.&lt;/p&gt;
&lt;p&gt;I decided to implement my own version of Nerdle that supports equations of multiple lengths. This was my first foray into backend programming in Go. I ended up with a server that has an API endpoint for gameplay and serves a simple frontend. I also had fun implementing the equation parser in Go.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
&lt;p&gt;The source code for this project is available on &lt;a href=&#34;https://github.com/ejyager00/nerdle&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;pictures&#34;&gt;Pictures&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;nerdleGameplay.png&#34; alt=&#34;Playing a game of nerdle.&#34;&gt; 
&lt;br&gt;
This is what Nerdle gameplay looks like on my implementation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;nerdleRulesConfig.png&#34; alt=&#34;Options and rules of nerdle.&#34;&gt;
&lt;br&gt;
These are the rules and options users can configure for my Nerdle.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
